{"version":3,"sources":["Title.js","Text.js","content.js","App.js","serviceWorker.js","index.js"],"names":["Title","title","subtitle","className","Text","children","contentSections","text","type","aos","AOS","init","ContentSection","section","App","map","idx","key","data-aos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAWeA,G,MAPD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACV,yBAAKC,UAAU,aACX,wBAAIA,UAAU,SAASF,GACvB,uBAAGE,UAAU,YAAYD,MCClBE,G,MAJF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACT,uBAAGF,UAAU,QAAQE,KCLZC,EAAkB,CAC3B,CAAEC,KAAM,oBAAqBC,KAAM,OAAQC,IAAK,aAChD,CAAEF,KAAM,yBAA0BC,KAAM,OAAQC,IAAK,cACrD,CAAEF,KAAM,QAASC,KAAM,OAAQC,IAAK,aACpC,CAAEF,KAAM,wBAAyBC,KAAM,OAAQC,IAAK,cACpD,CAAEF,KAAM,OAAQC,KAAM,OAAQC,IAAK,aACnC,CAAEF,KAAM,2BAA4BC,KAAM,OAAQC,IAAK,cACvD,CAAEF,KAAM,sBAAuBC,KAAM,OAAQC,IAAK,aAClD,CAAEF,KAAM,eAAgBC,KAAM,OAAQC,IAAK,cAC3C,CAAEF,KAAM,mBAAoBC,KAAM,OAAQC,IAAK,c,YCEnDC,IAAIC,OAEJ,IAAMC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACrB,yBAAKV,UAAU,kBACK,SAAjBU,EAAQL,MACN,kBAAC,EAAD,KAAOK,EAAQN,QAkBPO,MAbf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAOF,MAAM,KAAKC,SAAS,yCAC1BI,EAAgBS,KAAI,SAACF,EAASG,GAAV,OACnB,yBAAKC,IAAKD,EAAKE,WAAUL,EAAQJ,KAC/B,kBAAC,EAAD,CAAgBI,QAASA,UCffM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24223192.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Title.css';\n\nconst Title = ({ title, subtitle }) => (\n    <div className=\"Container\">\n        <h1 className=\"Title\">{title}</h1>\n        <p className=\"Subtitle\">{subtitle}</p>\n    </div>\n)\n\nexport default Title;","import React from 'react';\n\nimport './Text.css';\n\nconst Text = ({ children }) => (\n    <p className=\"Text\">{children}</p>\n)\n\nexport default Text;","export const contentSections = [\n    { text: \"Dear Mom and Dad,\", type: \"text\", aos: \"fade-left\" },\n    { text: \"Today is a special day\", type: \"text\", aos: \"fade-right\" },\n    { text: \"May 3\", type: \"text\", aos: \"fade-left\" },\n    { text: \"A day to celebrate...\", type: \"text\", aos: \"fade-right\" },\n    { text: \"YOU!\", type: \"text\", aos: \"fade-left\" },\n    { text: \"35 years is a long time.\", type: \"text\", aos: \"fade-right\" },\n    { text: \"[ Other things ]...\", type: \"text\", aos: \"fade-left\" },\n    { text: \"We love you,\", type: \"text\", aos: \"fade-right\" },\n    { text: \"Stephen and Mark\", type: \"text\", aos: \"fade-left\" },\n]","import React from 'react';\nimport AOS from 'aos';\n\nimport Title from './Title.js';\nimport Text from './Text.js';\nimport { contentSections } from './content.js';\n\nimport './App.css';\nimport 'aos/dist/aos.css';\n\n// Initialize AOS\nAOS.init();\n\nconst ContentSection = ({ section }) => (\n  <div className=\"ContentSection\">\n    {section.type === \"text\" &&\n      (<Text>{section.text}</Text>)\n    }\n  </div>\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title title=\"35\" subtitle=\"ðŸ‘‡Scroll down ðŸ‘‡\" />\n      {contentSections.map((section, idx) => (\n        <div key={idx} data-aos={section.aos}>\n          <ContentSection section={section} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}